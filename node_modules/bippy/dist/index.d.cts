import * as React from 'react';
import { FiberRoot, Fiber } from 'react-reconciler';

interface ReactRenderer {
    version: string;
    bundleType: 0 | 1;
}
interface ReactDevToolsGlobalHook {
    checkDCE: (fn: any) => void;
    supportsFiber: boolean;
    supportsFlight: boolean;
    renderers: Map<number, ReactRenderer>;
    onCommitFiberRoot: (rendererID: number, root: FiberRoot, priority: void | number) => void;
    onCommitFiberUnmount: (rendererID: number, fiber: Fiber) => void;
    onPostCommitFiberRoot: (rendererID: number, root: FiberRoot) => void;
    inject: (renderer: ReactRenderer) => number;
    _instrumentationSource?: string;
    _instrumentationIsActive?: boolean;
}
declare const version: string | undefined;
declare const BIPPY_INSTRUMENTATION_STRING: string;
declare const ClassComponentTag = 1;
declare const FunctionComponentTag = 0;
declare const ContextConsumerTag = 9;
declare const SuspenseComponentTag = 13;
declare const OffscreenComponentTag = 22;
declare const ForwardRefTag = 11;
declare const MemoComponentTag = 14;
declare const SimpleMemoComponentTag = 15;
declare const HostComponentTag = 5;
declare const HostHoistableTag = 26;
declare const HostSingletonTag = 27;
declare const DehydratedSuspenseComponent = 18;
declare const HostText = 6;
declare const Fragment = 7;
declare const LegacyHiddenComponent = 23;
declare const OffscreenComponent = 22;
declare const HostRoot = 3;
declare const CONCURRENT_MODE_NUMBER = 60111;
declare const CONCURRENT_MODE_SYMBOL_STRING = "Symbol(react.concurrent_mode)";
declare const DEPRECATED_ASYNC_MODE_SYMBOL_STRING = "Symbol(react.async_mode)";
declare const PerformedWork = 1;
declare const Placement = 2;
declare const DidCapture = 128;
declare const Hydrating = 4096;
declare const Update = 4;
declare const Cloned = 8;
declare const ChildDeletion = 16;
declare const ContentReset = 32;
declare const Ref = 512;
declare const Snapshot = 1024;
declare const Visibility = 8192;
declare const MutationMask: number;
declare const isValidElement: (element: unknown) => element is React.ReactElement;
/**
 * Host fibers are DOM nodes in react-dom, `View` in react-native, etc.
 */
declare const isHostFiber: (fiber: Fiber) => boolean;
/**
 * Composite fibers are functional, class components, etc.
 *
 * @see https://github.com/facebook/react/blob/865d2c418d5ba6fb4546e4b58616cd9b7701af85/packages/react/src/jsx/ReactJSXElement.js#L490
 */
declare const isCompositeFiber: (fiber: Fiber) => boolean;
declare const traverseContexts: (fiber: Fiber, selector: (prevValue: {
    context: React.Context<unknown>;
    memoizedValue: unknown;
}, nextValue: {
    context: React.Context<unknown>;
    memoizedValue: unknown;
}) => boolean | void) => boolean;
declare const traverseState: (fiber: Fiber, selector: (prevValue: {
    memoizedState: unknown;
}, nextValue: {
    memoizedState: unknown;
}) => boolean | void) => boolean;
declare const traverseProps: (fiber: Fiber, selector: (propName: string, nextValue: unknown, prevValue: unknown) => boolean | void) => boolean;
declare const didFiberRender: (fiber: Fiber) => boolean;
/**
 * A commit is means reconciliation occured and the host tree is updated
 */
declare const didFiberCommit: (fiber: Fiber) => boolean;
declare const getMutatedHostFibers: (fiber: Fiber) => Array<Fiber>;
declare const getFiberStack: (fiber: Fiber) => any[];
declare const shouldFilterFiber: (fiber: Fiber) => boolean;
declare const getNearestHostFiber: (fiber: Fiber) => Fiber | null;
declare const traverseFiber: (fiber: Fiber | null, selector: (node: Fiber) => boolean | void, ascending?: boolean) => Fiber | null;
declare const getTimings: (fiber?: Fiber | null | undefined) => {
    selfTime: number;
    totalTime: number;
};
declare const hasMemoCache: (fiber: Fiber) => boolean;
declare const getType: (type: any) => any;
declare const getDisplayName: (type: any) => string | null;
declare const isUsingRDT: () => boolean;
declare const detectReactBuildType: (renderer: ReactRenderer) => "development" | "production";
declare const installRDTHook: (onActive?: () => unknown) => ReactDevToolsGlobalHook;
declare const getRDTHook: (onActive?: () => unknown) => ReactDevToolsGlobalHook;
declare const isInstrumentationActive: () => boolean;
type RenderHandler = <S>(fiber: Fiber, phase: 'mount' | 'update' | 'unmount', state?: S) => unknown;
declare const mountFiberRecursively: (onRender: RenderHandler, firstChild: Fiber, traverseSiblings: boolean) => void;
declare const updateFiberRecursively: (onRender: RenderHandler, nextFiber: Fiber, prevFiber: Fiber, parentFiber: Fiber | null) => void;
declare const unmountFiber: (onRender: RenderHandler, fiber: Fiber) => void;
declare const unmountFiberChildrenRecursively: (onRender: RenderHandler, fiber: Fiber) => void;
/**
 * Creates a fiber visitor function.
 * @param options { onRender, onError }
 * @example
 * const visitor = createFiberVisitor({
 *   onRender(fiber, phase) {
 *     console.log(phase)
 *   },
 * });
 */
declare const createFiberVisitor: ({ onRender: onRenderWithoutState, onError, }: {
    onRender: RenderHandler;
    onError?: (error: unknown) => unknown;
}) => <S>(_rendererID: number, root: FiberRoot, state?: S) => void;
/**
 * Instruments the DevTools hook.
 * @param options { onCommitFiberRoot, onCommitFiberUnmount, onPostCommitFiberRoot, onActive, name }
 * @example
 * const hook = instrument({
 *   onActive() {
 *     console.log('initialized');
 *   },
 *   onCommitFiberRoot(rendererID, root) {
 *     console.log('fiberRoot', root.current)
 *   },
 * });
 */
declare const instrument: ({ onCommitFiberRoot, onCommitFiberUnmount, onPostCommitFiberRoot, onActive, name, }: {
    onCommitFiberRoot?: (rendererID: number, root: FiberRoot, priority: void | number) => unknown;
    onCommitFiberUnmount?: (rendererID: number, fiber: Fiber) => unknown;
    onPostCommitFiberRoot?: (rendererID: number, root: FiberRoot) => unknown;
    onActive?: () => unknown;
    name?: string;
}) => ReactDevToolsGlobalHook;

export { BIPPY_INSTRUMENTATION_STRING, CONCURRENT_MODE_NUMBER, CONCURRENT_MODE_SYMBOL_STRING, ChildDeletion, ClassComponentTag, Cloned, ContentReset, ContextConsumerTag, DEPRECATED_ASYNC_MODE_SYMBOL_STRING, DehydratedSuspenseComponent, DidCapture, ForwardRefTag, Fragment, FunctionComponentTag, HostComponentTag, HostHoistableTag, HostRoot, HostSingletonTag, HostText, Hydrating, LegacyHiddenComponent, MemoComponentTag, MutationMask, OffscreenComponent, OffscreenComponentTag, PerformedWork, Placement, type ReactDevToolsGlobalHook, type ReactRenderer, Ref, SimpleMemoComponentTag, Snapshot, SuspenseComponentTag, Update, Visibility, createFiberVisitor, detectReactBuildType, didFiberCommit, didFiberRender, getDisplayName, getFiberStack, getMutatedHostFibers, getNearestHostFiber, getRDTHook, getTimings, getType, hasMemoCache, installRDTHook, instrument, isCompositeFiber, isHostFiber, isInstrumentationActive, isUsingRDT, isValidElement, mountFiberRecursively, shouldFilterFiber, traverseContexts, traverseFiber, traverseProps, traverseState, unmountFiber, unmountFiberChildrenRecursively, updateFiberRecursively, version };
