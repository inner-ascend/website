"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf, __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: !0 });
}, __copyProps = (to, from, except, desc) => {
  if (from && typeof from == "object" || typeof from == "function")
    for (let key of __getOwnPropNames(from))
      !__hasOwnProp.call(to, key) && key !== except && __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: !0 }) : target,
  mod
)), __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: !0 }), mod);
var transformBabel_exports = {};
__export(transformBabel_exports, {
  transformGenerators: () => transformGenerators
});
module.exports = __toCommonJS(transformBabel_exports);
var import_core = __toESM(require("@babel/core"), 1);
async function transformGenerators(input) {
  var { development = !1 } = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
  return await new Promise(function(res, rej) {
    import_core.default.transform(input, {
      filename: "code.js",
      plugins: [
        [
          "@babel/plugin-transform-destructuring"
        ],
        [
          "@babel/plugin-transform-react-jsx",
          {
            development
          }
        ],
        [
          "@babel/plugin-transform-async-generator-functions"
        ],
        [
          "@babel/plugin-transform-async-to-generator"
        ],
        [
          "@babel/plugin-transform-runtime",
          {
            helpers: !0,
            rengerator: !1
          }
        ]
      ],
      compact: !1,
      minified: !1
    }, function(err, result) {
      (!result || err) && rej(err || "no res"), res(result.code);
    });
  });
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  transformGenerators
});
//# sourceMappingURL=transformBabel.js.map
