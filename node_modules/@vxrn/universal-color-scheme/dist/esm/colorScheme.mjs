import { useIsomorphicLayoutEffect } from "@vxrn/use-isomorphic-layout-effect";
import { useState } from "react";
import "react-native";
const listeners = /* @__PURE__ */new Set();
let currentSetting = "system",
  currentName = "light",
  isListening = !1;
function startWebMediaListener() {
  if (isListening) return;
  isListening = !0;
  const matcher = getWebIsDarkMatcher(),
    commit = () => {
      currentSetting === "system" && update(getSystemColorScheme());
    };
  commit(), matcher?.addEventListener?.("change", commit);
}
function setColorScheme(next) {
  update(next);
}
function getColorScheme() {
  return currentName;
}
function onColorSchemeChange(listener) {
  return listeners.add(listener), listener(currentSetting, currentName), () => {
    listeners.delete(listener);
  };
}
function useColorScheme() {
  const [state, setState] = useState(getColorScheme());
  return useIsomorphicLayoutEffect(() => {
    const dispose = onColorSchemeChange((setting, val) => {
      setState(val);
    });
    return startWebMediaListener(), () => {
      dispose();
    };
  }, []), [state, setColorScheme];
}
function useColorSchemeSetting() {
  const [state, setState] = useState(getColorSchemeSetting());
  return useIsomorphicLayoutEffect(() => {
    const dispose = onColorSchemeChange(() => {
      setState(getColorSchemeSetting());
    });
    return startWebMediaListener(), dispose;
  }, []), [state, setColorScheme];
}
const getColorSchemeSetting = () => currentSetting,
  getWebIsDarkMatcher = () => typeof window < "u" ? window.matchMedia?.("(prefers-color-scheme: dark)") : null;
function getSystemColorScheme() {
  return getWebIsDarkMatcher()?.matches ? "dark" : "light";
}
function update(setting) {
  const next = setting === "system" ? getSystemColorScheme() : setting;
  (next !== currentName || currentSetting !== setting) && (currentSetting = setting, currentName = next, listeners.forEach(l => l(currentSetting, currentName)));
}
export { getColorScheme, onColorSchemeChange, setColorScheme, useColorScheme, useColorSchemeSetting };
//# sourceMappingURL=colorScheme.mjs.map
