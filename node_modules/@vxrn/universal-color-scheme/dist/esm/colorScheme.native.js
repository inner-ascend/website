import { useIsomorphicLayoutEffect } from "@vxrn/use-isomorphic-layout-effect";
import { useState } from "react";
import { Appearance } from "react-native";
var listeners = /* @__PURE__ */ new Set(), currentSetting = "system", currentName = "light", isListening = !1;
function startWebMediaListener() {
  var _matcher_addEventListener;
  if (!isListening) {
    isListening = !0;
    var matcher = getWebIsDarkMatcher(), commit = function() {
      currentSetting === "system" && update(getSystemColorScheme());
    };
    commit(), matcher == null || (_matcher_addEventListener = matcher.addEventListener) === null || _matcher_addEventListener === void 0 || _matcher_addEventListener.call(matcher, "change", commit);
  }
}
function setColorScheme(next) {
  update(next);
}
function getColorScheme() {
  return currentName;
}
function onColorSchemeChange(listener) {
  return listeners.add(listener), listener(currentSetting, currentName), function() {
    listeners.delete(listener);
  };
}
function useColorScheme() {
  var [state, setState] = useState(getColorScheme());
  return useIsomorphicLayoutEffect(function() {
    var dispose = onColorSchemeChange(function(setting, val) {
      setState(val);
    });
    return startWebMediaListener(), function() {
      dispose();
    };
  }, []), [
    state,
    setColorScheme
  ];
}
Appearance.addChangeListener(function(next) {
  currentSetting === "system" && next.colorScheme && update(next.colorScheme);
});
var cur = Appearance.getColorScheme();
cur && currentSetting === "system" && (currentName = cur);
function useColorSchemeSetting() {
  var [state, setState] = useState(getColorSchemeSetting());
  return useIsomorphicLayoutEffect(function() {
    var dispose = onColorSchemeChange(function() {
      setState(getColorSchemeSetting());
    });
    return startWebMediaListener(), dispose;
  }, []), [
    state,
    setColorScheme
  ];
}
var getColorSchemeSetting = function() {
  return currentSetting;
}, getWebIsDarkMatcher = function() {
  var _window_matchMedia, _window;
  return typeof window < "u" ? (_window_matchMedia = (_window = window).matchMedia) === null || _window_matchMedia === void 0 ? void 0 : _window_matchMedia.call(_window, "(prefers-color-scheme: dark)") : null;
};
function getSystemColorScheme() {
  var _getWebIsDarkMatcher;
  return Appearance.getColorScheme() || "light";
}
function update(setting) {
  var next = setting === "system" ? getSystemColorScheme() : setting;
  (next !== currentName || currentSetting !== setting) && (currentSetting = setting, currentName = next, Appearance.setColorScheme(next), listeners.forEach(function(l) {
    return l(currentSetting, currentName);
  }));
}
export {
  getColorScheme,
  onColorSchemeChange,
  setColorScheme,
  useColorScheme,
  useColorSchemeSetting
};
//# sourceMappingURL=colorScheme.js.map
