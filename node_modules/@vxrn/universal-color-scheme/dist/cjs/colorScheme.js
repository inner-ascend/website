var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: !0 });
}, __copyProps = (to, from, except, desc) => {
  if (from && typeof from == "object" || typeof from == "function")
    for (let key of __getOwnPropNames(from))
      !__hasOwnProp.call(to, key) && key !== except && __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: !0 }), mod);
var colorScheme_exports = {};
__export(colorScheme_exports, {
  getColorScheme: () => getColorScheme,
  onColorSchemeChange: () => onColorSchemeChange,
  setColorScheme: () => setColorScheme,
  useColorScheme: () => useColorScheme,
  useColorSchemeSetting: () => useColorSchemeSetting
});
module.exports = __toCommonJS(colorScheme_exports);
var import_use_isomorphic_layout_effect = require("@vxrn/use-isomorphic-layout-effect"), import_react = require("react"), import_react_native = require("react-native-web");
const listeners = /* @__PURE__ */ new Set();
let currentSetting = "system", currentName = "light", isListening = !1;
function startWebMediaListener() {
  if (isListening) return;
  isListening = !0;
  const matcher = getWebIsDarkMatcher(), commit = () => {
    currentSetting === "system" && update(getSystemColorScheme());
  };
  commit(), matcher?.addEventListener?.("change", commit);
}
function setColorScheme(next) {
  update(next);
}
function getColorScheme() {
  return currentName;
}
function onColorSchemeChange(listener) {
  return listeners.add(listener), listener(currentSetting, currentName), () => {
    listeners.delete(listener);
  };
}
function useColorScheme() {
  const [state, setState] = (0, import_react.useState)(getColorScheme());
  return (0, import_use_isomorphic_layout_effect.useIsomorphicLayoutEffect)(() => {
    const dispose = onColorSchemeChange((setting, val) => {
      setState(val);
    });
    return startWebMediaListener(), () => {
      dispose();
    };
  }, []), [state, setColorScheme];
}
function useColorSchemeSetting() {
  const [state, setState] = (0, import_react.useState)(getColorSchemeSetting());
  return (0, import_use_isomorphic_layout_effect.useIsomorphicLayoutEffect)(() => {
    const dispose = onColorSchemeChange(() => {
      setState(getColorSchemeSetting());
    });
    return startWebMediaListener(), dispose;
  }, []), [state, setColorScheme];
}
const getColorSchemeSetting = () => currentSetting, getWebIsDarkMatcher = () => typeof window < "u" ? window.matchMedia?.("(prefers-color-scheme: dark)") : null;
function getSystemColorScheme() {
  return getWebIsDarkMatcher()?.matches ? "dark" : "light";
}
function update(setting) {
  const next = setting === "system" ? getSystemColorScheme() : setting;
  (next !== currentName || currentSetting !== setting) && (currentSetting = setting, currentName = next, listeners.forEach((l) => l(currentSetting, currentName)));
}
//# sourceMappingURL=colorScheme.js.map
