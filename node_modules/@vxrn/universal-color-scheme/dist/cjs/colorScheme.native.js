"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: !0 });
}, __copyProps = (to, from, except, desc) => {
  if (from && typeof from == "object" || typeof from == "function")
    for (let key of __getOwnPropNames(from))
      !__hasOwnProp.call(to, key) && key !== except && __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: !0 }), mod);
var colorScheme_exports = {};
__export(colorScheme_exports, {
  getColorScheme: () => getColorScheme,
  onColorSchemeChange: () => onColorSchemeChange,
  setColorScheme: () => setColorScheme,
  useColorScheme: () => useColorScheme,
  useColorSchemeSetting: () => useColorSchemeSetting
});
module.exports = __toCommonJS(colorScheme_exports);
var import_use_isomorphic_layout_effect = require("@vxrn/use-isomorphic-layout-effect"), import_react = require("react"), import_react_native = require("react-native"), listeners = /* @__PURE__ */ new Set(), currentSetting = "system", currentName = "light", isListening = !1;
function startWebMediaListener() {
  var _matcher_addEventListener;
  if (!isListening) {
    isListening = !0;
    var matcher = getWebIsDarkMatcher(), commit = function() {
      currentSetting === "system" && update(getSystemColorScheme());
    };
    commit(), matcher == null || (_matcher_addEventListener = matcher.addEventListener) === null || _matcher_addEventListener === void 0 || _matcher_addEventListener.call(matcher, "change", commit);
  }
}
function setColorScheme(next) {
  update(next);
}
function getColorScheme() {
  return currentName;
}
function onColorSchemeChange(listener) {
  return listeners.add(listener), listener(currentSetting, currentName), function() {
    listeners.delete(listener);
  };
}
function useColorScheme() {
  var [state, setState] = (0, import_react.useState)(getColorScheme());
  return (0, import_use_isomorphic_layout_effect.useIsomorphicLayoutEffect)(function() {
    var dispose = onColorSchemeChange(function(setting, val) {
      setState(val);
    });
    return startWebMediaListener(), function() {
      dispose();
    };
  }, []), [
    state,
    setColorScheme
  ];
}
import_react_native.Appearance.addChangeListener(function(next) {
  currentSetting === "system" && next.colorScheme && update(next.colorScheme);
});
var cur = import_react_native.Appearance.getColorScheme();
cur && currentSetting === "system" && (currentName = cur);
function useColorSchemeSetting() {
  var [state, setState] = (0, import_react.useState)(getColorSchemeSetting());
  return (0, import_use_isomorphic_layout_effect.useIsomorphicLayoutEffect)(function() {
    var dispose = onColorSchemeChange(function() {
      setState(getColorSchemeSetting());
    });
    return startWebMediaListener(), dispose;
  }, []), [
    state,
    setColorScheme
  ];
}
var getColorSchemeSetting = function() {
  return currentSetting;
}, getWebIsDarkMatcher = function() {
  var _window_matchMedia, _window;
  return typeof window < "u" ? (_window_matchMedia = (_window = window).matchMedia) === null || _window_matchMedia === void 0 ? void 0 : _window_matchMedia.call(_window, "(prefers-color-scheme: dark)") : null;
};
function getSystemColorScheme() {
  var _getWebIsDarkMatcher;
  return import_react_native.Appearance.getColorScheme() || "light";
}
function update(setting) {
  var next = setting === "system" ? getSystemColorScheme() : setting;
  (next !== currentName || currentSetting !== setting) && (currentSetting = setting, currentName = next, import_react_native.Appearance.setColorScheme(next), listeners.forEach(function(l) {
    return l(currentSetting, currentName);
  }));
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  getColorScheme,
  onColorSchemeChange,
  setColorScheme,
  useColorScheme,
  useColorSchemeSetting
});
//# sourceMappingURL=colorScheme.js.map
