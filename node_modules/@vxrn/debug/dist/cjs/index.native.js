"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf, __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: !0 });
}, __copyProps = (to, from, except, desc) => {
  if (from && typeof from == "object" || typeof from == "function")
    for (let key of __getOwnPropNames(from))
      !__hasOwnProp.call(to, key) && key !== except && __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: !0 }) : target,
  mod
)), __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: !0 }), mod);
var index_exports = {};
__export(index_exports, {
  createDebugger: () => createDebugger
});
module.exports = __toCommonJS(index_exports);
var import_debug = __toESM(require("debug"), 1), DEBUG = process.env.DEBUG;
function createDebugger(namespacePartial) {
  var options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
  return {
    debug: createSingleDebugger(namespacePartial, options),
    debugDetails: createSingleDebugger(namespacePartial, options)
  };
}
function createSingleDebugger(namespacePartial) {
  var options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {}, namespace = namespacePartial.includes(":") ? namespacePartial : `vxrn:${namespacePartial}`, log = (0, import_debug.default)(namespace), { onlyWhenFocused } = options, enabled = log.enabled;
  if (enabled && onlyWhenFocused) {
    var ns = typeof onlyWhenFocused == "string" ? onlyWhenFocused : namespace;
    enabled = !!(DEBUG != null && DEBUG.includes(ns));
  }
  var filter = void 0;
  if (enabled) {
    var fn = function() {
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++)
        args[_key] = arguments[_key];
      (!filter || args.some(function(a) {
        var _a_includes;
        return a == null || (_a_includes = a.includes) === null || _a_includes === void 0 ? void 0 : _a_includes.call(a, filter);
      })) && log(...args);
    };
    return fn.namespace = namespace, fn;
  }
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  createDebugger
});
//# sourceMappingURL=index.js.map
