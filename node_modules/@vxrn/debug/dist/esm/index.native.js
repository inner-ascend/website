import debug from "debug";
var DEBUG = process.env.DEBUG;
function createDebugger(namespacePartial) {
  var options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
  return {
    debug: createSingleDebugger(namespacePartial, options),
    debugDetails: createSingleDebugger(namespacePartial, options)
  };
}
function createSingleDebugger(namespacePartial) {
  var options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {}, namespace = namespacePartial.includes(":") ? namespacePartial : `vxrn:${namespacePartial}`, log = debug(namespace), { onlyWhenFocused } = options, enabled = log.enabled;
  if (enabled && onlyWhenFocused) {
    var ns = typeof onlyWhenFocused == "string" ? onlyWhenFocused : namespace;
    enabled = !!DEBUG?.includes(ns);
  }
  var filter = void 0;
  if (enabled) {
    var fn = function() {
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++)
        args[_key] = arguments[_key];
      (!filter || args.some(function(a) {
        var _a_includes;
        return a == null || (_a_includes = a.includes) === null || _a_includes === void 0 ? void 0 : _a_includes.call(a, filter);
      })) && log(...args);
    };
    return fn.namespace = namespace, fn;
  }
}
export {
  createDebugger
};
//# sourceMappingURL=index.js.map
