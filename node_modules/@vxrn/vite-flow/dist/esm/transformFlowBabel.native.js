import babel from "@babel/core";
import { resolvePath } from "@vxrn/resolve";
async function transformFlowBabel(input) {
  var { development = !1 } = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {}, metroPresetPath = "module:metro-react-native-babel-preset";
  try {
    metroPresetPath = resolvePath("metro-react-native-babel-preset", resolvePath("@vxrn/vite-flow"));
  } catch {
  }
  return await new Promise(function(res, rej) {
    babel.transform(input, {
      filename: "file.js",
      // this is required for @react-native/babel-plugin-codegen to work.
      presets: [
        [
          metroPresetPath,
          {
            // To use the `@babel/plugin-transform-react-jsx` plugin for JSX.
            useTransformReactJSXExperimental: !0,
            unstable_transformProfile: "hermes-stable"
          }
        ]
      ],
      plugins: [
        [
          "babel-plugin-syntax-hermes-parser"
        ],
        // This parser is required for the `@babel/plugin-transform-react-jsx` plugin to work.
        [
          "@react-native/babel-plugin-codegen"
        ],
        // Transforms thing like `export default (codegenNativeComponent<NativeProps>('DebuggingOverlay'));` into `export default NativeComponentRegistry.get(nativeComponentName, () => __INTERNAL_VIEW_CONFIG);`, we need to do this here since Flow types are required to generate that `__INTERNAL_VIEW_CONFIG`. Without this we'll get warnings/errors like "Codegen didn't run for DebuggingOverlay".
        [
          "@babel/plugin-transform-react-jsx",
          {
            development
          }
        ],
        [
          "@babel/plugin-transform-private-methods",
          {
            loose: !0
          }
        ]
      ]
    }, function(err, result) {
      (!result || err) && rej(err || "no res"), res(result.code);
    });
  });
}
export {
  transformFlowBabel
};
//# sourceMappingURL=transformFlowBabel.js.map
