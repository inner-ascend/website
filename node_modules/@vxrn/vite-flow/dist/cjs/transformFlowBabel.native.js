"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf, __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: !0 });
}, __copyProps = (to, from, except, desc) => {
  if (from && typeof from == "object" || typeof from == "function")
    for (let key of __getOwnPropNames(from))
      !__hasOwnProp.call(to, key) && key !== except && __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: !0 }) : target,
  mod
)), __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: !0 }), mod);
var transformFlowBabel_exports = {};
__export(transformFlowBabel_exports, {
  transformFlowBabel: () => transformFlowBabel
});
module.exports = __toCommonJS(transformFlowBabel_exports);
var import_core = __toESM(require("@babel/core"), 1), import_resolve = require("@vxrn/resolve");
async function transformFlowBabel(input) {
  var { development = !1 } = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {}, metroPresetPath = "module:metro-react-native-babel-preset";
  try {
    metroPresetPath = (0, import_resolve.resolvePath)("metro-react-native-babel-preset", (0, import_resolve.resolvePath)("@vxrn/vite-flow"));
  } catch {
  }
  return await new Promise(function(res, rej) {
    import_core.default.transform(input, {
      filename: "file.js",
      // this is required for @react-native/babel-plugin-codegen to work.
      presets: [
        [
          metroPresetPath,
          {
            // To use the `@babel/plugin-transform-react-jsx` plugin for JSX.
            useTransformReactJSXExperimental: !0,
            unstable_transformProfile: "hermes-stable"
          }
        ]
      ],
      plugins: [
        [
          "babel-plugin-syntax-hermes-parser"
        ],
        // This parser is required for the `@babel/plugin-transform-react-jsx` plugin to work.
        [
          "@react-native/babel-plugin-codegen"
        ],
        // Transforms thing like `export default (codegenNativeComponent<NativeProps>('DebuggingOverlay'));` into `export default NativeComponentRegistry.get(nativeComponentName, () => __INTERNAL_VIEW_CONFIG);`, we need to do this here since Flow types are required to generate that `__INTERNAL_VIEW_CONFIG`. Without this we'll get warnings/errors like "Codegen didn't run for DebuggingOverlay".
        [
          "@babel/plugin-transform-react-jsx",
          {
            development
          }
        ],
        [
          "@babel/plugin-transform-private-methods",
          {
            loose: !0
          }
        ]
      ]
    }, function(err, result) {
      (!result || err) && rej(err || "no res"), res(result.code);
    });
  });
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  transformFlowBabel
});
//# sourceMappingURL=transformFlowBabel.js.map
