import { getDevServerLocation } from "./getDevServerLocation";
class HMRClient {
  constructor(app) {
    this.app = app;
    const port = process.env.REACT_NATIVE_SERVER_PUBLIC_PORT || 8081;
    this.url = `ws://${getDevServerLocation().hostname}:${port}/__hmr?platform=${process.env.REACT_NATIVE_PLATFORM || "ios"}`, this.socket = new WebSocket(this.url), console.info(" \u24F5 [hmr] connecting..."), this.socket.onopen = () => {
      console.info(" \u24F5 [hmr] connected");
    }, this.socket.onclose = () => {
      console.info(` \u24F5 [hmr] disconnected ${this.url}`);
    }, this.socket.onerror = (event) => {
      console.error(" \u24F5 [hmr] error", event);
    }, this.socket.onmessage = (event) => {
      try {
        const data = JSON.parse(event.data.toString());
        this.processMessage(data);
      } catch (error) {
        console.warn(" \u24F5 [hmr] invalid message", error);
      }
    };
  }
  url;
  socket;
  lastHash = "";
  upToDate(hash) {
    return hash && (this.lastHash = hash), this.lastHash === __webpack_hash__;
  }
  processMessage(message) {
    switch (message.action) {
      case "building":
        this.app.LoadingView.showMessage("Rebuilding...", "refresh"), console.info(" \u24F5 [hmr] bundle rebuilding", {
          name: message.body?.name
        });
        break;
      // biome-ignore lint/suspicious/noFallthroughSwitchClause: <explanation>
      case "built":
        console.info(" \u24F5 [hmr] bundle rebuilt", {
          name: message.body?.name,
          time: message.body?.time
        });
      // Fall through
      case "sync":
        if (!message.body) {
          console.warn(" \u24F5 [hmr] message body is empty");
          return;
        }
        if (message.body.errors?.length) {
          message.body.errors.forEach((error) => {
            console.error("Cannot apply update due to error:", error);
          }), this.app.LoadingView.hide();
          return;
        }
        message.body.warnings?.length && message.body.warnings.forEach((warning) => {
          console.warn(" \u24F5 [hmr] bundle contains warnings:", warning);
        }), this.applyUpdate(message.body);
    }
  }
  applyUpdate(update) {
    if (!module.hot)
      throw new Error(" \u24F5 [hmr] hot Module Replacement is disabled.");
    !this.upToDate(update.hash) && module.hot.status() === "idle" && (console.info(" \u24F5 [hmr] checking for updates on the server..."), this.checkUpdates(update));
  }
  checkUpdates(update) {
    try {
      this.app.LoadingView.showMessage("Refreshing...", "refresh"), module.hot?.check(!1).then((updatedModules) => {
        if (!updatedModules) {
          console.warn(" \u24F5 [hmr] cannot find update - full reload needed"), this.app.reload();
          return;
        }
        module.hot?.apply({
          ignoreDeclined: !0,
          ignoreUnaccepted: !1,
          ignoreErrored: !1,
          onDeclined: (data) => {
            console.warn(" \u24F5 [hmr] ignored an update due to declined module", {
              chain: data.chain
            });
          }
        }).then((renewedModules) => {
          this.upToDate() || this.checkUpdates(update);
          const unacceptedModules = updatedModules.filter((moduleId) => renewedModules && renewedModules.indexOf(moduleId) < 0);
          unacceptedModules.length ? (console.warn(" \u24F5 [hmr] not every module was accepted - full reload needed", {
            unacceptedModules
          }), this.app.reload()) : (console.info(" \u24F5 [hmr] renewed modules - app is up to date", {
            renewedModules
          }), this.app.dismissErrors());
        });
      });
    } catch (error) {
      module.hot?.status() === "fail" || module.hot?.status() === "abort" ? (console.warn(" \u24F5 [hmr] cannot check for update - full reload needed"), console.warn("[hmr]", error), this.app.reload()) : console.warn(" \u24F5 [hmr] update check failed", { error });
    } finally {
      this.app.LoadingView.hide();
    }
  }
}
const loadHMRClient = () => {
  const { DevSettings, Platform } = require("react-native"), LoadingView = {
    showMessage: () => {
    },
    hide: () => {
    }
  }, reload = () => DevSettings.reload(), dismissErrors = () => {
    Platform.OS === "ios" ? require("react-native/Libraries/NativeModules/specs/NativeRedBox").default?.dismiss?.() : require("react-native/Libraries/Core/NativeExceptionsManager").default?.dismissRedbox(), require("react-native/Libraries/LogBox/Data/LogBoxData").clear();
  };
  new HMRClient({ reload, dismissErrors, LoadingView });
};
export {
  loadHMRClient
};
//# sourceMappingURL=hmr-client.js.map
