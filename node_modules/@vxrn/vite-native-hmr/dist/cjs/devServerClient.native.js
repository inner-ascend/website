"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf, __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: !0 });
}, __copyProps = (to, from, except, desc) => {
  if (from && typeof from == "object" || typeof from == "function")
    for (let key of __getOwnPropNames(from))
      !__hasOwnProp.call(to, key) && key !== except && __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: !0 }) : target,
  mod
)), __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: !0 }), mod);
var devServerClient_exports = {};
__export(devServerClient_exports, {
  client: () => client,
  disable: () => disable,
  enable: () => enable,
  log: () => log,
  registerBundle: () => registerBundle,
  setup: () => setup
});
module.exports = __toCommonJS(devServerClient_exports);
var import_pretty_format = __toESM(require("pretty-format")), import_getDevServerLocation = require("./getDevServerLocation"), import_hmr_client = require("./hmr-client");
function _class_call_check(instance, Constructor) {
  if (!(instance instanceof Constructor))
    throw new TypeError("Cannot call a class as a function");
}
function _defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || !1, descriptor.configurable = !0, "value" in descriptor && (descriptor.writable = !0), Object.defineProperty(target, descriptor.key, descriptor);
  }
}
function _create_class(Constructor, protoProps, staticProps) {
  return protoProps && _defineProperties(Constructor.prototype, protoProps), staticProps && _defineProperties(Constructor, staticProps), Constructor;
}
function _define_property(obj, key, value) {
  return key in obj ? Object.defineProperty(obj, key, {
    value,
    enumerable: !0,
    configurable: !0,
    writable: !0
  }) : obj[key] = value, obj;
}
(0, import_hmr_client.loadHMRClient)();
var DevServerClient = /* @__PURE__ */ function() {
  "use strict";
  function DevServerClient2() {
    var _this = this;
    _class_call_check(this, DevServerClient2), _define_property(this, "socket", void 0), _define_property(this, "buffer", []);
    var initSocket = function() {
      var address = `ws://${(0, import_getDevServerLocation.getDevServerLocation)().host}/__client`;
      _this.socket = new WebSocket(address);
      var onClose = function(event) {
        console.warn("Disconnected from the Dev Server:", event.message), _this.socket = void 0;
      };
      _this.socket.onclose = onClose, _this.socket.onerror = onClose, _this.socket.onopen = function() {
        _this.flushBuffer();
      };
    };
    process.env.NODE_ENV === "development" && initSocket();
  }
  return _create_class(DevServerClient2, [
    {
      key: "send",
      value: function(level, data) {
        try {
          var _this_socket;
          (_this_socket = this.socket) === null || _this_socket === void 0 || _this_socket.send(JSON.stringify({
            type: "client-log",
            level,
            data: data.map(function(item) {
              return typeof item == "string" ? item : (0, import_pretty_format.default)(item, {
                escapeString: !0,
                highlight: !0,
                maxDepth: 3,
                min: !0,
                plugins: [
                  // @ts-expect-error
                  import_pretty_format.default.plugins.ReactElement
                ]
              });
            })
          }));
        } catch {
          try {
            var _this_socket1;
            (_this_socket1 = this.socket) === null || _this_socket1 === void 0 || _this_socket1.send(JSON.stringify({
              type: "client-log",
              level,
              data: data.map(function(item, index) {
                try {
                  return typeof item == "string" ? item : JSON.stringify(item);
                } catch (err) {
                  return `Error stringifying item at index ${index} - ${item} - ${err}`;
                }
              })
            }));
          } catch (err) {
            try {
              var _this_socket2;
              (_this_socket2 = this.socket) === null || _this_socket2 === void 0 || _this_socket2.send(JSON.stringify({
                type: "client-log",
                level: "error",
                data: [
                  "error sending client log: " + err
                ]
              }));
            } catch {
            }
          }
        }
      }
    },
    {
      // final err
      // Ignore error
      key: "flushBuffer",
      value: function() {
        var _this = this;
        globalThis.__vxrnTmpLogs && (globalThis.__vxrnTmpLogs.forEach(function(param) {
          var { level: level2, data: data2 } = param;
          _this.buffer.push({
            level: level2,
            data: data2
          });
        }), delete globalThis.__vxrnTmpLogs);
        var _iteratorNormalCompletion = !0, _didIteratorError = !1, _iteratorError = void 0;
        try {
          for (var _iterator = this.buffer[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = !0) {
            var { level, data } = _step.value;
            this.send(level, data);
          }
        } catch (err) {
          _didIteratorError = !0, _iteratorError = err;
        } finally {
          try {
            !_iteratorNormalCompletion && _iterator.return != null && _iterator.return();
          } finally {
            if (_didIteratorError)
              throw _iteratorError;
          }
        }
        this.buffer = [];
      }
    },
    {
      key: "log",
      value: function(level, data) {
        if (level !== "groupEnd")
          if (this.socket && this.socket.readyState === WebSocket.OPEN)
            this.flushBuffer(), this.send(level, data);
          else {
            if (globalThis.__vxrnTmpLogs) return;
            this.buffer.push({
              level,
              data
            });
          }
      }
    }
  ]), DevServerClient2;
}(), client = new DevServerClient(), setup = function() {
}, enable = function() {
}, disable = function() {
}, registerBundle = function() {
}, log = function(level, data) {
  client.log(level, data);
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  client,
  disable,
  enable,
  log,
  registerBundle,
  setup
});
//# sourceMappingURL=devServerClient.js.map
