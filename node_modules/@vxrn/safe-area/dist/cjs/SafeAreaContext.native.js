"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf, __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: !0 });
}, __copyProps = (to, from, except, desc) => {
  if (from && typeof from == "object" || typeof from == "function")
    for (let key of __getOwnPropNames(from))
      !__hasOwnProp.call(to, key) && key !== except && __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: !0 }) : target,
  mod
)), __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: !0 }), mod);
var SafeAreaContext_exports = {};
__export(SafeAreaContext_exports, {
  SafeAreaConsumer: () => SafeAreaConsumer,
  SafeAreaContext: () => SafeAreaContext,
  SafeAreaFrameContext: () => SafeAreaFrameContext,
  SafeAreaInsetsContext: () => SafeAreaInsetsContext,
  SafeAreaProvider: () => SafeAreaProvider,
  useSafeArea: () => useSafeArea,
  useSafeAreaFrame: () => useSafeAreaFrame,
  useSafeAreaInsets: () => useSafeAreaInsets,
  withSafeAreaInsets: () => withSafeAreaInsets
});
module.exports = __toCommonJS(SafeAreaContext_exports);
var import_jsx_runtime = require("react/jsx-runtime"), React = __toESM(require("react"), 1), import_react_native = require("react-native"), import_NativeSafeAreaProvider = require("./NativeSafeAreaProvider"), isDev = process.env.NODE_ENV !== "production", SafeAreaInsetsContext = /* @__PURE__ */ React.createContext(null);
isDev && (SafeAreaInsetsContext.displayName = "SafeAreaInsetsContext");
var SafeAreaFrameContext = /* @__PURE__ */ React.createContext(null);
isDev && (SafeAreaFrameContext.displayName = "SafeAreaFrameContext");
function SafeAreaProvider(param) {
  var { children, initialMetrics, initialSafeAreaInsets, ...others } = param, parentInsets = useParentSafeAreaInsets(), parentFrame = useParentSafeAreaFrame(), _initialMetrics_insets, _ref, _ref1, [insets, setInsets] = React.useState((_ref1 = (_ref = (_initialMetrics_insets = initialMetrics == null ? void 0 : initialMetrics.insets) !== null && _initialMetrics_insets !== void 0 ? _initialMetrics_insets : initialSafeAreaInsets) !== null && _ref !== void 0 ? _ref : parentInsets) !== null && _ref1 !== void 0 ? _ref1 : null), _initialMetrics_frame, _ref2, [frame, setFrame] = React.useState((_ref2 = (_initialMetrics_frame = initialMetrics == null ? void 0 : initialMetrics.frame) !== null && _initialMetrics_frame !== void 0 ? _initialMetrics_frame : parentFrame) !== null && _ref2 !== void 0 ? _ref2 : {
    // Backwards compat so we render anyway if we don't have frame.
    x: 0,
    y: 0,
    width: import_react_native.Dimensions.get("window").width,
    height: import_react_native.Dimensions.get("window").height
  }), onInsetsChange = React.useCallback(function(event) {
    var { nativeEvent: { frame: nextFrame, insets: nextInsets } } = event;
    React.startTransition(function() {
      setFrame(function(curFrame) {
        return (
          // Backwards compat with old native code that won't send frame.
          nextFrame && (nextFrame.height !== curFrame.height || nextFrame.width !== curFrame.width || nextFrame.x !== curFrame.x || nextFrame.y !== curFrame.y) ? nextFrame : curFrame
        );
      }), setInsets(function(curInsets) {
        return !curInsets || nextInsets.bottom !== curInsets.bottom || nextInsets.left !== curInsets.left || nextInsets.right !== curInsets.right || nextInsets.top !== curInsets.top ? nextInsets : curInsets;
      });
    });
  }, []);
  return /* @__PURE__ */ (0, import_jsx_runtime.jsx)(import_NativeSafeAreaProvider.NativeSafeAreaProvider, {
    onInsetsChange,
    ...others,
    children: /* @__PURE__ */ (0, import_jsx_runtime.jsx)(SafeAreaFrameContext.Provider, {
      value: frame,
      children: /* @__PURE__ */ (0, import_jsx_runtime.jsx)(SafeAreaInsetsContext.Provider, {
        value: insets,
        children
      })
    })
  });
}
function useParentSafeAreaInsets() {
  return React.useContext(SafeAreaInsetsContext);
}
function useParentSafeAreaFrame() {
  return React.useContext(SafeAreaFrameContext);
}
var NO_INSETS_ERROR = "No safe area value available. Make sure you are rendering `<SafeAreaProvider>` at the top of your app.";
function useSafeAreaInsets() {
  var insets = React.useContext(SafeAreaInsetsContext);
  if (insets == null)
    throw new Error(NO_INSETS_ERROR);
  return insets;
}
function useSafeAreaFrame() {
  var frame = React.useContext(SafeAreaFrameContext);
  if (frame == null)
    throw new Error(NO_INSETS_ERROR);
  return frame;
}
function withSafeAreaInsets(WrappedComponent) {
  return /* @__PURE__ */ React.forwardRef(function(props, ref) {
    var insets = useSafeAreaInsets();
    return /* @__PURE__ */ (0, import_jsx_runtime.jsx)(WrappedComponent, {
      ...props,
      insets,
      ref
    });
  });
}
function useSafeArea() {
  return useSafeAreaInsets();
}
var SafeAreaConsumer = SafeAreaInsetsContext.Consumer, SafeAreaContext = SafeAreaInsetsContext;
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  SafeAreaConsumer,
  SafeAreaContext,
  SafeAreaFrameContext,
  SafeAreaInsetsContext,
  SafeAreaProvider,
  useSafeArea,
  useSafeAreaFrame,
  useSafeAreaInsets,
  withSafeAreaInsets
});
//# sourceMappingURL=SafeAreaContext.js.map
