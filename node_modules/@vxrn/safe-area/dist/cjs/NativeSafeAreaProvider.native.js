"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf, __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: !0 });
}, __copyProps = (to, from, except, desc) => {
  if (from && typeof from == "object" || typeof from == "function")
    for (let key of __getOwnPropNames(from))
      !__hasOwnProp.call(to, key) && key !== except && __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: !0 }) : target,
  mod
)), __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: !0 }), mod);
var NativeSafeAreaProvider_exports = {};
__export(NativeSafeAreaProvider_exports, {
  NativeSafeAreaProvider: () => NativeSafeAreaProvider
});
module.exports = __toCommonJS(NativeSafeAreaProvider_exports);
var import_jsx_runtime = require("react/jsx-runtime"), React = __toESM(require("react"), 1), import_react_native = require("react-native"), CSSTransitions = {
  WebkitTransition: "webkitTransitionEnd",
  Transition: "transitionEnd",
  MozTransition: "transitionend",
  MSTransition: "msTransitionEnd",
  OTransition: "oTransitionEnd"
};
function NativeSafeAreaProvider(param) {
  var { children, style, onInsetsChange } = param;
  React.useEffect(function() {
    if (!(typeof document > "u")) {
      var element = createContextElement();
      document.body.appendChild(element);
      var onEnd = function() {
        var { paddingTop, paddingBottom, paddingLeft, paddingRight } = window.getComputedStyle(element), insets = {
          top: paddingTop ? Number.parseInt(paddingTop, 10) : 0,
          bottom: paddingBottom ? Number.parseInt(paddingBottom, 10) : 0,
          left: paddingLeft ? Number.parseInt(paddingLeft, 10) : 0,
          right: paddingRight ? Number.parseInt(paddingRight, 10) : 0
        }, frame = {
          x: 0,
          y: 0,
          width: document.documentElement.offsetWidth,
          height: document.documentElement.offsetHeight
        };
        onInsetsChange({
          nativeEvent: {
            insets,
            frame
          }
        });
      };
      return element.addEventListener(getSupportedTransitionEvent(), onEnd), onEnd(), function() {
        document.body.removeChild(element), element.removeEventListener(getSupportedTransitionEvent(), onEnd);
      };
    }
  }, [
    onInsetsChange
  ]);
  var finalStyle = style || {
    flex: 1,
    width: "100%",
    height: "100%",
    maxHeight: "100%",
    maxWidth: "100%"
  };
  return /* @__PURE__ */ (0, import_jsx_runtime.jsx)(import_react_native.View, {
    style: finalStyle,
    children
  });
}
var _supportedTransitionEvent = null;
function getSupportedTransitionEvent() {
  if (_supportedTransitionEvent != null)
    return _supportedTransitionEvent;
  var element = document.createElement("invalidtype");
  _supportedTransitionEvent = CSSTransitions.Transition;
  for (var key in CSSTransitions)
    if (element.style[key] !== void 0) {
      _supportedTransitionEvent = CSSTransitions[key];
      break;
    }
  return _supportedTransitionEvent;
}
var _supportedEnv = null;
function getSupportedEnv() {
  if (_supportedEnv !== null)
    return _supportedEnv;
  var { CSS } = window;
  return CSS && CSS.supports && CSS.supports("top: constant(safe-area-inset-top)") ? _supportedEnv = "constant" : _supportedEnv = "env", _supportedEnv;
}
function getInset(side) {
  return `${getSupportedEnv()}(safe-area-inset-${side})`;
}
function createContextElement() {
  var element = document.createElement("div"), { style } = element;
  return style.position = "fixed", style.left = "0", style.top = "0", style.width = "0", style.height = "0", style.zIndex = "-1", style.overflow = "hidden", style.visibility = "hidden", style.transitionDuration = "0.05s", style.transitionProperty = "padding", style.transitionDelay = "0s", style.paddingTop = getInset("top"), style.paddingBottom = getInset("bottom"), style.paddingLeft = getInset("left"), style.paddingRight = getInset("right"), element;
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  NativeSafeAreaProvider
});
//# sourceMappingURL=NativeSafeAreaProvider.js.map
