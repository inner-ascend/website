import * as React from "react";
import { View, StyleSheet } from "react-native-web";
import { useSafeAreaInsets } from "./SafeAreaContext.mjs";
import { jsx } from "react/jsx-runtime";
const TOP = 8,
  RIGHT = 4,
  BOTTOM = 2,
  LEFT = 1,
  ALL = 15,
  edgeBitmaskMap = {
    top: TOP,
    right: RIGHT,
    bottom: BOTTOM,
    left: LEFT
  },
  SafeAreaView = React.forwardRef(({
    style = {},
    mode,
    edges,
    ...rest
  }, ref) => {
    const insets = useSafeAreaInsets(),
      edgeBitmask = edges != null ? Array.isArray(edges) ? edges.reduce((acc, edge) => acc | edgeBitmaskMap[edge], 0) : Object.keys(edges).reduce((acc, edge) => acc | edgeBitmaskMap[edge], 0) : ALL,
      appliedStyle = React.useMemo(() => {
        const insetTop = edgeBitmask & TOP ? insets.top : 0,
          insetRight = edgeBitmask & RIGHT ? insets.right : 0,
          insetBottom = edgeBitmask & BOTTOM ? insets.bottom : 0,
          insetLeft = edgeBitmask & LEFT ? insets.left : 0,
          flatStyle = StyleSheet.flatten(style);
        if (mode === "margin") {
          const {
              margin = 0,
              marginVertical = margin,
              marginHorizontal = margin,
              marginTop = marginVertical,
              marginRight = marginHorizontal,
              marginBottom = marginVertical,
              marginLeft = marginHorizontal
            } = flatStyle,
            marginStyle = {
              marginTop: marginTop + insetTop,
              marginRight: marginRight + insetRight,
              marginBottom: marginBottom + insetBottom,
              marginLeft: marginLeft + insetLeft
            };
          return [style, marginStyle];
        }
        const {
            padding = 0,
            paddingVertical = padding,
            paddingHorizontal = padding,
            paddingTop = paddingVertical,
            paddingRight = paddingHorizontal,
            paddingBottom = paddingVertical,
            paddingLeft = paddingHorizontal
          } = flatStyle,
          paddingStyle = {
            paddingTop: paddingTop + insetTop,
            paddingRight: paddingRight + insetRight,
            paddingBottom: paddingBottom + insetBottom,
            paddingLeft: paddingLeft + insetLeft
          };
        return [style, paddingStyle];
      }, [style, insets, mode, edgeBitmask]);
    return /* @__PURE__ */jsx(View, {
      style: appliedStyle,
      ...rest,
      ref
    });
  });
export { SafeAreaView };
//# sourceMappingURL=SafeAreaView.mjs.map
