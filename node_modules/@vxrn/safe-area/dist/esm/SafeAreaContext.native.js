import { jsx as _jsx } from "react/jsx-runtime";
import * as React from "react";
import { Dimensions } from "react-native";
import { NativeSafeAreaProvider } from "./NativeSafeAreaProvider";
var isDev = process.env.NODE_ENV !== "production", SafeAreaInsetsContext = /* @__PURE__ */ React.createContext(null);
isDev && (SafeAreaInsetsContext.displayName = "SafeAreaInsetsContext");
var SafeAreaFrameContext = /* @__PURE__ */ React.createContext(null);
isDev && (SafeAreaFrameContext.displayName = "SafeAreaFrameContext");
function SafeAreaProvider(param) {
  var { children, initialMetrics, initialSafeAreaInsets, ...others } = param, parentInsets = useParentSafeAreaInsets(), parentFrame = useParentSafeAreaFrame(), _initialMetrics_insets, _ref, _ref1, [insets, setInsets] = React.useState((_ref1 = (_ref = (_initialMetrics_insets = initialMetrics?.insets) !== null && _initialMetrics_insets !== void 0 ? _initialMetrics_insets : initialSafeAreaInsets) !== null && _ref !== void 0 ? _ref : parentInsets) !== null && _ref1 !== void 0 ? _ref1 : null), _initialMetrics_frame, _ref2, [frame, setFrame] = React.useState((_ref2 = (_initialMetrics_frame = initialMetrics?.frame) !== null && _initialMetrics_frame !== void 0 ? _initialMetrics_frame : parentFrame) !== null && _ref2 !== void 0 ? _ref2 : {
    // Backwards compat so we render anyway if we don't have frame.
    x: 0,
    y: 0,
    width: Dimensions.get("window").width,
    height: Dimensions.get("window").height
  }), onInsetsChange = React.useCallback(function(event) {
    var { nativeEvent: { frame: nextFrame, insets: nextInsets } } = event;
    React.startTransition(function() {
      setFrame(function(curFrame) {
        return (
          // Backwards compat with old native code that won't send frame.
          nextFrame && (nextFrame.height !== curFrame.height || nextFrame.width !== curFrame.width || nextFrame.x !== curFrame.x || nextFrame.y !== curFrame.y) ? nextFrame : curFrame
        );
      }), setInsets(function(curInsets) {
        return !curInsets || nextInsets.bottom !== curInsets.bottom || nextInsets.left !== curInsets.left || nextInsets.right !== curInsets.right || nextInsets.top !== curInsets.top ? nextInsets : curInsets;
      });
    });
  }, []);
  return /* @__PURE__ */ _jsx(NativeSafeAreaProvider, {
    onInsetsChange,
    ...others,
    children: /* @__PURE__ */ _jsx(SafeAreaFrameContext.Provider, {
      value: frame,
      children: /* @__PURE__ */ _jsx(SafeAreaInsetsContext.Provider, {
        value: insets,
        children
      })
    })
  });
}
function useParentSafeAreaInsets() {
  return React.useContext(SafeAreaInsetsContext);
}
function useParentSafeAreaFrame() {
  return React.useContext(SafeAreaFrameContext);
}
var NO_INSETS_ERROR = "No safe area value available. Make sure you are rendering `<SafeAreaProvider>` at the top of your app.";
function useSafeAreaInsets() {
  var insets = React.useContext(SafeAreaInsetsContext);
  if (insets == null)
    throw new Error(NO_INSETS_ERROR);
  return insets;
}
function useSafeAreaFrame() {
  var frame = React.useContext(SafeAreaFrameContext);
  if (frame == null)
    throw new Error(NO_INSETS_ERROR);
  return frame;
}
function withSafeAreaInsets(WrappedComponent) {
  return /* @__PURE__ */ React.forwardRef(function(props, ref) {
    var insets = useSafeAreaInsets();
    return /* @__PURE__ */ _jsx(WrappedComponent, {
      ...props,
      insets,
      ref
    });
  });
}
function useSafeArea() {
  return useSafeAreaInsets();
}
var SafeAreaConsumer = SafeAreaInsetsContext.Consumer, SafeAreaContext = SafeAreaInsetsContext;
export {
  SafeAreaConsumer,
  SafeAreaContext,
  SafeAreaFrameContext,
  SafeAreaInsetsContext,
  SafeAreaProvider,
  useSafeArea,
  useSafeAreaFrame,
  useSafeAreaInsets,
  withSafeAreaInsets
};
//# sourceMappingURL=SafeAreaContext.js.map
