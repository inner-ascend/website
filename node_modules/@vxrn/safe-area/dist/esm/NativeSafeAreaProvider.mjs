import * as React from "react";
import { View } from "react-native-web";
import { jsx } from "react/jsx-runtime";
const CSSTransitions = {
  WebkitTransition: "webkitTransitionEnd",
  Transition: "transitionEnd",
  MozTransition: "transitionend",
  MSTransition: "msTransitionEnd",
  OTransition: "oTransitionEnd"
};
function NativeSafeAreaProvider({
  children,
  style,
  onInsetsChange
}) {
  return React.useEffect(() => {
    if (typeof document > "u") return;
    const element = createContextElement();
    document.body.appendChild(element);
    const onEnd = () => {
      const {
          paddingTop,
          paddingBottom,
          paddingLeft,
          paddingRight
        } = window.getComputedStyle(element),
        insets = {
          top: paddingTop ? Number.parseInt(paddingTop, 10) : 0,
          bottom: paddingBottom ? Number.parseInt(paddingBottom, 10) : 0,
          left: paddingLeft ? Number.parseInt(paddingLeft, 10) : 0,
          right: paddingRight ? Number.parseInt(paddingRight, 10) : 0
        },
        frame = {
          x: 0,
          y: 0,
          width: document.documentElement.offsetWidth,
          height: document.documentElement.offsetHeight
        };
      onInsetsChange({
        nativeEvent: {
          insets,
          frame
        }
      });
    };
    return element.addEventListener(getSupportedTransitionEvent(), onEnd), onEnd(), () => {
      document.body.removeChild(element), element.removeEventListener(getSupportedTransitionEvent(), onEnd);
    };
  }, [onInsetsChange]), /* @__PURE__ */jsx(View, {
    style: style || {
      flex: 1,
      width: "100%",
      height: "100%",
      maxHeight: "100%",
      maxWidth: "100%"
    },
    children
  });
}
let _supportedTransitionEvent = null;
function getSupportedTransitionEvent() {
  if (_supportedTransitionEvent != null) return _supportedTransitionEvent;
  const element = document.createElement("invalidtype");
  _supportedTransitionEvent = CSSTransitions.Transition;
  for (const key in CSSTransitions) if (element.style[key] !== void 0) {
    _supportedTransitionEvent = CSSTransitions[key];
    break;
  }
  return _supportedTransitionEvent;
}
let _supportedEnv = null;
function getSupportedEnv() {
  if (_supportedEnv !== null) return _supportedEnv;
  const {
    CSS
  } = window;
  return CSS && CSS.supports && CSS.supports("top: constant(safe-area-inset-top)") ? _supportedEnv = "constant" : _supportedEnv = "env", _supportedEnv;
}
function getInset(side) {
  return `${getSupportedEnv()}(safe-area-inset-${side})`;
}
function createContextElement() {
  const element = document.createElement("div"),
    {
      style
    } = element;
  return style.position = "fixed", style.left = "0", style.top = "0", style.width = "0", style.height = "0", style.zIndex = "-1", style.overflow = "hidden", style.visibility = "hidden", style.transitionDuration = "0.05s", style.transitionProperty = "padding", style.transitionDelay = "0s", style.paddingTop = getInset("top"), style.paddingBottom = getInset("bottom"), style.paddingLeft = getInset("left"), style.paddingRight = getInset("right"), element;
}
export { NativeSafeAreaProvider };
//# sourceMappingURL=NativeSafeAreaProvider.mjs.map
