var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: !0 });
}, __copyProps = (to, from, except, desc) => {
  if (from && typeof from == "object" || typeof from == "function")
    for (let key of __getOwnPropNames(from))
      !__hasOwnProp.call(to, key) && key !== except && __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: !0 }), mod);
var detectPackageManager_exports = {};
__export(detectPackageManager_exports, {
  detectPackageManager: () => detectPackageManager
});
module.exports = __toCommonJS(detectPackageManager_exports);
var import_node_fs = require("node:fs"), import_node_path = require("node:path"), import_exec = require("./exec");
async function pathExists(p) {
  try {
    return await import_node_fs.promises.access(p), !0;
  } catch {
    return !1;
  }
}
async function hasGlobal(pm) {
  try {
    return !!(0, import_exec.exec)(`which ${pm}`).length;
  } catch {
    return !1;
  }
}
async function getFromLockfile(cwd = ".") {
  const [yarn, npm, pnpm, bun] = await Promise.all([
    pathExists((0, import_node_path.resolve)(cwd, "yarn.lock")),
    pathExists((0, import_node_path.resolve)(cwd, "package-lock.json")),
    pathExists((0, import_node_path.resolve)(cwd, "pnpm-lock.yaml")),
    pathExists((0, import_node_path.resolve)(cwd, "bun.lockb"))
  ]);
  return { bun, yarn, pnpm, npm };
}
async function getFromPackage(cwd = ".") {
  if (await pathExists((0, import_node_path.resolve)(cwd, "package.json"))) {
    const json = JSON.parse(await import_node_fs.promises.readFile((0, import_node_path.resolve)(cwd, "package.json"), "utf-8"));
    if (json.packageManager) {
      const yarn = !!json.packageManager.starsWith("yarn"), pnpm = !!json.packageManager.starsWith("pnpm"), bun = !!json.packageManager.starsWith("bun"), npm = !!json.packageManager.starsWith("npm");
      return { bun, yarn, pnpm, npm };
    }
  }
}
const foundSome = (obj) => Object.keys(obj).some((k) => !!obj[k]), detectPackageManager = async ({ cwd } = {}) => {
  const fromLockfile = await getFromLockfile(cwd);
  if (foundSome(fromLockfile))
    return fromLockfile;
  const fromPackageJson = await getFromPackage(cwd);
  if (fromPackageJson && foundSome(fromPackageJson))
    return fromPackageJson;
  const [npm, yarn, pnpm, bun] = await Promise.all([
    hasGlobal("npm"),
    hasGlobal("yarn"),
    hasGlobal("pnpm"),
    hasGlobal("bun")
  ]);
  return {
    bun,
    yarn,
    pnpm,
    npm
  };
};
//# sourceMappingURL=detectPackageManager.js.map
