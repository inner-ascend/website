var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
    for (var name in all) __defProp(target, name, {
      get: all[name],
      enumerable: !0
    });
  },
  __copyProps = (to, from, except, desc) => {
    if (from && typeof from == "object" || typeof from == "function") for (let key of __getOwnPropNames(from)) !__hasOwnProp.call(to, key) && key !== except && __defProp(to, key, {
      get: () => from[key],
      enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable
    });
    return to;
  };
var __toCommonJS = mod => __copyProps(__defProp({}, "__esModule", {
  value: !0
}), mod);
var exec_exports = {};
__export(exec_exports, {
  exec: () => exec,
  execPromise: () => execPromise,
  execPromiseQuiet: () => execPromiseQuiet
});
module.exports = __toCommonJS(exec_exports);
var import_node_child_process = require("node:child_process");
const exec = (cmd, options) => (0, import_node_child_process.execSync)(cmd, options)?.toString() || "",
  execPromise = (cmd, options) => new Promise((resolve, reject) => {
    const [command, ...args] = cmd.split(" "),
      child = (0, import_node_child_process.spawn)(command, args, {
        stdio: options?.quiet ? "pipe" : "inherit",
        shell: !0,
        ...options
      });
    (!options?.quiet || process.env.DEBUG) && (child.stdout?.pipe(process.stdout), child.stderr?.pipe(process.stderr)), child.on("close", code => {
      code !== 0 ? reject(new Error(`Command failed with exit code ${code}: ${cmd}`)) : resolve();
    }), child.on("error", error => {
      reject(error);
    });
  }),
  execPromiseQuiet = (cmd, options) => execPromise(cmd, {
    ...options,
    quiet: !0
  });