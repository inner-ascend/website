import { promises as fs } from "node:fs";
import { resolve } from "node:path";
import { exec } from "./exec";
async function pathExists(p) {
  try {
    return await fs.access(p), !0;
  } catch {
    return !1;
  }
}
async function hasGlobal(pm) {
  try {
    return !!exec(`which ${pm}`).length;
  } catch {
    return !1;
  }
}
async function getFromLockfile(cwd = ".") {
  const [yarn, npm, pnpm, bun] = await Promise.all([
    pathExists(resolve(cwd, "yarn.lock")),
    pathExists(resolve(cwd, "package-lock.json")),
    pathExists(resolve(cwd, "pnpm-lock.yaml")),
    pathExists(resolve(cwd, "bun.lockb"))
  ]);
  return { bun, yarn, pnpm, npm };
}
async function getFromPackage(cwd = ".") {
  if (await pathExists(resolve(cwd, "package.json"))) {
    const json = JSON.parse(await fs.readFile(resolve(cwd, "package.json"), "utf-8"));
    if (json.packageManager) {
      const yarn = !!json.packageManager.starsWith("yarn"), pnpm = !!json.packageManager.starsWith("pnpm"), bun = !!json.packageManager.starsWith("bun"), npm = !!json.packageManager.starsWith("npm");
      return { bun, yarn, pnpm, npm };
    }
  }
}
const foundSome = (obj) => Object.keys(obj).some((k) => !!obj[k]), detectPackageManager = async ({ cwd } = {}) => {
  const fromLockfile = await getFromLockfile(cwd);
  if (foundSome(fromLockfile))
    return fromLockfile;
  const fromPackageJson = await getFromPackage(cwd);
  if (fromPackageJson && foundSome(fromPackageJson))
    return fromPackageJson;
  const [npm, yarn, pnpm, bun] = await Promise.all([
    hasGlobal("npm"),
    hasGlobal("yarn"),
    hasGlobal("pnpm"),
    hasGlobal("bun")
  ]);
  return {
    bun,
    yarn,
    pnpm,
    npm
  };
};
export {
  detectPackageManager
};
//# sourceMappingURL=detectPackageManager.js.map
