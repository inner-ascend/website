function mustReplace(source, replacements) {
  var sourceOut = source, _iteratorNormalCompletion = !0, _didIteratorError = !1, _iteratorError = void 0;
  try {
    for (var _iterator = replacements[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = !0) {
      var { find, replace, optional } = _step.value;
      if (!optional) {
        var found = find instanceof RegExp ? find.test(sourceOut) : sourceOut.includes(find);
        if (!found)
          throw new Error(`Substring or pattern "${find}" not found in the string.`);
      }
      sourceOut = sourceOut.replace(find, replace);
    }
  } catch (err) {
    _didIteratorError = !0, _iteratorError = err;
  } finally {
    try {
      !_iteratorNormalCompletion && _iterator.return != null && _iterator.return();
    } finally {
      if (_didIteratorError)
        throw _iteratorError;
    }
  }
  return sourceOut;
}
export {
  mustReplace
};
//# sourceMappingURL=mustReplace.js.map
