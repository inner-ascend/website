import { execSync, spawn } from "node:child_process";
var exec = function(cmd, options) {
  var _execSync;
  return ((_execSync = execSync(cmd, options)) === null || _execSync === void 0 ? void 0 : _execSync.toString()) || "";
}, execPromise = function(cmd, options) {
  return new Promise(function(resolve, reject) {
    var [command, ...args] = cmd.split(" "), child = spawn(command, args, {
      stdio: options?.quiet ? "pipe" : "inherit",
      shell: !0,
      ...options
    });
    if (!options?.quiet || process.env.DEBUG) {
      var _child_stdout, _child_stderr;
      (_child_stdout = child.stdout) === null || _child_stdout === void 0 || _child_stdout.pipe(process.stdout), (_child_stderr = child.stderr) === null || _child_stderr === void 0 || _child_stderr.pipe(process.stderr);
    }
    child.on("close", function(code) {
      code !== 0 ? reject(new Error(`Command failed with exit code ${code}: ${cmd}`)) : resolve();
    }), child.on("error", function(error) {
      reject(error);
    });
  });
}, execPromiseQuiet = function(cmd, options) {
  return execPromise(cmd, {
    ...options,
    quiet: !0
  });
};
export {
  exec,
  execPromise,
  execPromiseQuiet
};
//# sourceMappingURL=exec.js.map
