import { execSync, spawn } from "node:child_process";
const exec = (cmd, options) => execSync(cmd, options)?.toString() || "",
  execPromise = (cmd, options) => new Promise((resolve, reject) => {
    const [command, ...args] = cmd.split(" "),
      child = spawn(command, args, {
        stdio: options?.quiet ? "pipe" : "inherit",
        shell: !0,
        ...options
      });
    (!options?.quiet || process.env.DEBUG) && (child.stdout?.pipe(process.stdout), child.stderr?.pipe(process.stderr)), child.on("close", code => {
      code !== 0 ? reject(new Error(`Command failed with exit code ${code}: ${cmd}`)) : resolve();
    }), child.on("error", error => {
      reject(error);
    });
  }),
  execPromiseQuiet = (cmd, options) => execPromise(cmd, {
    ...options,
    quiet: !0
  });
export { exec, execPromise, execPromiseQuiet };
//# sourceMappingURL=exec.mjs.map
